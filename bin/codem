#!/usr/bin/env ruby

require 'optparse'

ARGV << "-h" if ARGV.empty?

def command?(command)
  system("which #{ command} > /dev/null 2>&1")
end

class CodemCommand
  attr_reader :host, :input, :output, :preset, :notify, :verbose, :silent
  def initialize
    options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = "Usage: codem [OPTIONS]"
      opts.separator ""

      options[:host] = 'http://127.0.0.1:3000'
      opts.on('-H', '--host [HOST]', "Host to connect to, defaults to 127.0.0.1:3000") do |h|
        options[:host] = h
      end

      opts.on('-i', '--input [FILE]', "Input file to convert") do |i|
        options[:input] = i
      end

      opts.on('-o', '--output [FILE]', "Output file to write to") do |o|
        options[:output] = o
      end

      opts.on('-p', '--preset [NAME]', "Preset to use") do |p|
        options[:preset] = p
      end

      opts.on('-n', '--notify [LIST]', "List of emails and/or urls separated by comma's to notify when the job is completed") do |n|
        options[:notify] = n
      end

      options[:verbose] = false
      opts.on('-v', '--verbose', "Print verbose output") do |v|
        options[:verbose] = true
      end
      
      options[:silent] = false
      opts.on('-s', '--silent', 'Be silent; no output') do |s|
        options[:silent] = true
      end

      opts.on('-a', '--arguments [LIST]', "Comma-separated list of arbitrary key=values to store with the job") do |a|
        options[:arguments] = a
      end
      
      opts.on_tail('-h', '--help', 'Display this screen') do
        puts opts
        exit
      end
    end

    optparse.parse!
    
    @input   = options[:input]
    @output  = options[:output]
    @preset  = options[:preset]
    @host    = options[:host]
    @verbose = options[:verbose]
    @silent  = options[:silent]
    @host    = options[:host]
    @notify  = options[:notify]
    @args    = options[:arguments]
    
    unless @input && @output && @preset
      puts "ERROR: Not all required parameters (`input', `output', `preset') have been specified"
      exit 1
    end
  end
  
  def args
    "'input=#{@input}&output=#{@output}&preset=#{@preset}&notify=#{@notify}&arguments=#{@args}'"
  end
  
  def run
    puts Kernel.exec("#{command} #{url} #{'>/dev/null 2>&1' if silent}")
  end
  
  def url
    "'#{@host}/api/jobs'"
  end
end

class CurlCodem < CodemCommand
  def command
    "curl #{'-v' if verbose} #{'-s' if silent} -d #{args}"
  end
end

class WgetCodem < CodemCommand
  def command
    "wget #{verbose ? '-v' : '-nv -q'} -O- --post-data #{args}"
  end
end

if command?('curl')
  CurlCodem.new.run
elsif command?('wget')
  WgetCodem.new.run
else
  puts "Sorry, we could not locate `curl' or `wget' in the current $PATH:"
  puts "#{ `echo $PATH` }"
end
